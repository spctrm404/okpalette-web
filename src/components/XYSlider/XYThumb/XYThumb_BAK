// todo: constraint func
// todo: touch situ

import type { Dim2D } from "../index";
import { useContext, useEffect, useMemo, useRef, useState } from "react";
import { XYTrackContext } from "../XYTrack";
import { mergeProps, useFocus, useHover, useMove, usePress } from "react-aria";

export type XYThumbProps = {
  minValue?: Dim2D;
  maxValue?: Dim2D;
  step?: Dim2D;
  value: Dim2D;
  onChange?: (newValue: Dim2D) => void;
  constraint?: (newValue: Dim2D) => Dim2D;
  index?: number;
};

export const XYThumb = ({
  minValue = { x: 0, y: 0 },
  maxValue = { x: 100, y: 100 },
  step = { x: 1, y: 1 },
  value,
  onChange,
  constraint,
  index,
}: XYThumbProps) => {
  const { trackSize, thumbSize } = useContext(XYTrackContext);

  const normPosFromVal: Dim2D = useMemo(
    () => ({
      x: (value.x - minValue.x) / (maxValue.x - minValue.x),
      y: (value.y - minValue.y) / (maxValue.y - minValue.y),
    }),
    [value.x, value.y, minValue.x, minValue.y, maxValue.x, maxValue.y],
  );
  const [normPos, setNormPos] = useState<Dim2D>(normPosFromVal);

  const pxPosFromVal: Dim2D = useMemo(
    () => ({
      x: normPosFromVal.x * trackSize.width,
      y: (1 - normPosFromVal.y) * trackSize.height,
    }),
    [normPosFromVal.x, normPosFromVal.y, trackSize.width, trackSize.height],
  );
  const pxPosRef = useRef<Dim2D>(pxPosFromVal);

  const useEffectGateRef = useRef(true);
  if (
    useEffectGateRef.current &&
    (normPos.x !== normPosFromVal.x || normPos.y !== normPosFromVal.y)
  ) {
    console.log("update norm");
    setNormPos(normPosFromVal);
    pxPosRef.current = pxPosFromVal;
  }
  useEffect(() => {
    if (!useEffectGateRef.current) return;

    pxPosRef.current = pxPosFromVal;
    console.log("pxPosRef.current", pxPosRef.current);
  }, [pxPosFromVal]);

  // useEffect(() => {
  //   if (!updateFlagRef.current) return;
  //   console.log(`${index}_useEffect1`);
  //   console.log("value", value);
  //   console.log("normPosFromVal", normPosFromVal);
  //   console.log("pxPosFromVal", pxPosFromVal);
  //   setNormPos(normPosFromVal);
  //   pxPosRef.current = pxPosFromVal;
  // }, [value.x, value.y]);
  // useEffect(() => {
  //   console.log(`${index}_useEffect2`);
  //   console.log("trackSize", trackSize);
  //   console.log("pxPosFromVal", pxPosFromVal);
  //   pxPosRef.current = pxPosFromVal;
  // }, [trackSize.width, trackSize.height]);

  const clampPxPos = (pxPos: Dim2D): Dim2D => ({
    x: Math.min(trackSize.width, Math.max(0, pxPos.x)),
    y: Math.min(trackSize.height, Math.max(0, pxPos.y)),
  });
  const clampNormPos = (normPos: Dim2D): Dim2D => ({
    x: Math.min(1, Math.max(0, normPos.x)),
    y: Math.min(1, Math.max(0, normPos.y)),
  });

  const pxPosToNormPos = (pxPos: Dim2D): Dim2D => ({
    x: pxPos.x / trackSize.width,
    y: 1 - pxPos.y / trackSize.height,
  });
  const normPosToVal = (normPos: Dim2D): Dim2D => ({
    x: normPos.x * (maxValue.x - minValue.x) + minValue.x,
    y: normPos.y * (maxValue.y - minValue.y) + minValue.y,
  });

  const quantizeVal = (val: Dim2D): Dim2D => {
    const roundToNearestMultiple = (
      base: number,
      multipleOf: number,
    ): number => {
      const decimalPlaces = (multipleOf.toString().split(".")[1] || "").length;
      const result = Math.round(base / multipleOf) * multipleOf;
      const factor = Math.pow(10, decimalPlaces);
      return Math.round(result * factor) / factor;
    };

    return {
      x: roundToNearestMultiple(val.x, step.x),
      y: roundToNearestMultiple(val.y, step.y),
    };
  };

  const normPosToPxPos = (normPos: Dim2D): Dim2D => ({
    x: normPos.x * trackSize.width,
    y: (1 - normPos.y) * trackSize.height,
  });

  const { focusProps } = useFocus({
    onFocus: (e) => {},
    onBlur: (e) => {},
    onFocusChange: (e) => {},
  });
  const { hoverProps, isHovered } = useHover({
    onHoverStart: (e) => {},
    onHoverEnd: (e) => {},
    onHoverChange: (e) => {},
  });
  const { moveProps } = useMove({
    onMoveStart: (e) => {},
    onMove: (e) => {
      useEffectGateRef.current = false;

      // update pxPos
      let pxPos = { ...pxPosRef.current };
      if (e.pointerType === "keyboard") pxPos = clampPxPos(pxPos);
      pxPos.x += e.deltaX;
      pxPos.y += e.deltaY;
      pxPosRef.current = pxPos;

      // pxPos -> normPos
      const normPos = pxPosToNormPos(pxPosRef.current);
      const clampedNormPos = clampNormPos(normPos);
      setNormPos(clampedNormPos);

      // normPos -> val
      const newValue = normPosToVal(clampedNormPos);
      const quantizedNewValue = quantizeVal(newValue);

      console.log(`${index}_onMove`);
      onChange?.(quantizedNewValue);
    },
    onMoveEnd: (e) => {
      // update pxPos
      let pxPos = { ...pxPosRef.current };
      pxPos = clampPxPos(pxPos);
      pxPosRef.current = pxPos;

      // pxPos -> normPos
      const normPos = pxPosToNormPos(pxPosRef.current);
      const clampedNormPos = clampNormPos(normPos);
      setNormPos(clampedNormPos);

      // normPos -> val
      const newValue = normPosToVal(clampedNormPos);
      const quantizedNewValue = quantizeVal(newValue);

      useEffectGateRef.current = true;
      console.log(`${index}_onMoveEnd`);
      onChange?.(quantizedNewValue);
    },
  });
  const { pressProps, isPressed } = usePress({
    onPress: (e) => {},
    onPressStart: (e) => {},
    onPressEnd: (e) => {},
    onPressChange: (e) => {},
    onPressUp: (e) => {},
  });

  const reactAriaProps = mergeProps(
    focusProps,
    hoverProps,
    moveProps,
    pressProps,
  );

  return (
    <>
      <div
        {...reactAriaProps}
        tabIndex={0}
        style={{
          width: thumbSize.width,
          height: thumbSize.height,
          borderRadius: "100%",
          position: "absolute",
          left: `calc(${100 * normPos.x}% - ${0.5 * thumbSize.width}px)`,
          bottom: `calc(${100 * normPos.y}% - ${0.5 * thumbSize.height}px)`,
          background: "black",
        }}
      />
      <div
        style={{
          position: "absolute",
          left: `calc(${100 * normPos.x}% - ${0.5 * thumbSize.width}px)`,
          top: `calc(${100 * (1 - normPos.y)}% - ${0.5 * thumbSize.height}px + 24px)`,
        }}
      >
        <div>{`${normPos.x}, ${normPos.y}`}</div>
        <div>{`${pxPosRef.current.x}, ${pxPosRef.current.y}`}</div>
      </div>
    </>
  );
};
